---
import exercisesTableEntryUrl from "../../scripts/exercises-table.entry.js?url";
import BaseLayout from "../../layouts/BaseLayout.astro";
import Breadcrumbs from "../../components/Breadcrumbs.astro";
import FilterDrawer from "../../components/FilterDrawer.astro";
import FavoriteToggle from "../../components/FavoriteToggle.astro";
import { getCollection } from "astro:content";
const exercises = (await getCollection("exercises")).sort((a, b) =>
  a.data.name.localeCompare(b.data.name)
);
const names = Array.from(new Set(exercises.map((e) => e.data.name))).sort(
  (a, b) => a.localeCompare(b)
);
const focuses = Array.from(
  new Set(exercises.map((e) => e.data.focus).filter(Boolean))
).sort((a, b) => a.localeCompare(b));
const sources = Array.from(
  new Set(exercises.map((e) => e.data.source).filter(Boolean))
).sort((a, b) => a.localeCompare(b));
const credits = Array.from(
  new Set(exercises.map((e) => e.data.credit).filter(Boolean))
).sort((a, b) => a.localeCompare(b));
const minPeople = Array.from(
  new Set(exercises.map((e) => e.data.minimumPeople).filter((value) =>
    value != null
  ))
).sort((a, b) => a - b);
---

<BaseLayout>
  <section class="collection page-section">
    <header class="collection__header">
      <Breadcrumbs items={[{ label: "Exercises" }]} />
      <div class="stack" style="gap:0.5rem;">
        <h1 class="section-title">Exercises</h1>
        <p class="section-subtitle">
          Drill skills, sharpen instincts, and guide your team through purpose-built
          reps.
        </p>
      </div>
      <div class="collection__controls">
        <FilterDrawer
          fields={[
            {
              name: "query",
              label: "Search",
              type: "search",
              placeholder: "Search exercises...",
              autocomplete: "off",
            },
            { name: "name", label: "Name", type: "select", options: names },
            focuses.length
              ? {
                  name: "focus",
                  label: "Focus",
                  type: "select",
                  options: focuses,
                }
              : null,
            sources.length
              ? {
                  name: "source",
                  label: "Source",
                  type: "select",
                  options: sources,
                }
              : null,
            credits.length
              ? {
                  name: "credit",
                  label: "Credit",
                  type: "select",
                  options: credits,
                }
              : null,
            minPeople.length
              ? {
                  name: "minimumPeople",
                  label: "Minimum People",
                  type: "select",
                  options: minPeople.map(String),
                }
              : null,
            { name: "favoritesOnly", label: "Favourites only", type: "checkbox" },
          ].filter(Boolean)}
        />
      </div>
    </header>
    <ul id="exerciseList" class="resource-list" data-resource-display="table">
      {
        exercises.map((exercise) => (
          <li
            class="resource-card"
            data-resource-id={exercise.slug}
            data-name={exercise.data.name}
            data-focus={exercise.data.focus ?? ""}
            data-source={exercise.data.source ?? ""}
            data-credit={exercise.data.credit ?? ""}
            data-minimum-people={
              exercise.data.minimumPeople != null
                ? String(exercise.data.minimumPeople)
                : ""
            }
            data-description={exercise.data.shortDescription ?? ""}
            data-tags={
              Array.isArray(exercise.data.tags)
                ? exercise.data.tags.filter(Boolean).join(", ")
                : ""
            }
            data-favorite="false"
          >
            <h2 class="resource-card__title">
              <a href={`/exercises/${exercise.slug}`}>{exercise.data.name}</a>
            </h2>
            <FavoriteToggle
              contentType="exercise"
              slug={exercise.slug}
              title={exercise.data.name}
              description={exercise.data.shortDescription}
            />
            <p class="resource-card__summary">{exercise.data.shortDescription}</p>
            <div class="meta-badges">
              {exercise.data.focus && <span class="meta-badge">Focus · {exercise.data.focus}</span>}
              {exercise.data.minimumPeople != null && (
                <span class="meta-badge">
                  Min · {exercise.data.minimumPeople}
                </span>
              )}
            </div>
          </li>
        ))
      }
    </ul>
  </section>
  <script type="module" src={exercisesTableEntryUrl}></script>
  <style>
    .resource-card__title a {
      color: inherit;
    }
    .resource-card__title a:hover,
    .resource-card__title a:focus-visible {
      color: var(--color-accent, #ff2f55);
    }
    .resource-empty {
      margin: 1.5rem 0 0;
      text-align: center;
      color: color-mix(in srgb, var(--color-muted, #cbbfca) 85%, black 15%);
      font-size: 0.95rem;
    }
  </style>
</BaseLayout>
