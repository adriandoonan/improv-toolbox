---
import BaseLayout from "../../layouts/BaseLayout.astro";
import Breadcrumbs from "../../components/Breadcrumbs.astro";
import FilterDrawer from "../../components/FilterDrawer.astro";
import FavoriteToggle from "../../components/FavoriteToggle.astro";
import { getCollection } from "astro:content";
const forms = (await getCollection("forms")).sort((a, b) =>
  a.data.name.localeCompare(b.data.name)
);
const names = Array.from(new Set(forms.map((f) => f.data.name))).sort((a, b) =>
  a.localeCompare(b)
);
const types = Array.from(
  new Set(forms.map((f) => f.data.type).filter(Boolean))
).sort((a, b) => a.localeCompare(b));
---

<BaseLayout>
  <section class="collection page-section">
    <header class="collection__header">
      <Breadcrumbs items={[{ label: "Forms" }]} />
      <div class="stack" style="gap:0.5rem;">
        <h1 class="section-title">Forms</h1>
        <p class="section-subtitle">
          Map beats, build arcs, and bring signature structures to your troupe&apos;s
          next show.
        </p>
      </div>
      <div class="collection__controls">
        <FilterDrawer
          fields={[
            { name: "name", label: "Name", type: "select", options: names },
            types.length
              ? { name: "type", label: "Type", type: "select", options: types }
              : null,
            { name: "favoritesOnly", label: "Favourites only", type: "checkbox" },
          ].filter(Boolean)}
        />
      </div>
    </header>
    <ul id="formList" class="resource-list">
      {
        forms.map((form) => (
          <li
            class="resource-card"
            data-name={form.data.name}
            data-type={form.data.type ?? ""}
            data-favorite="false"
          >
            <h2 class="resource-card__title">
              <a href={`/forms/${form.slug}`}>{form.data.name}</a>
            </h2>
            <FavoriteToggle
              contentType="form"
              slug={form.slug}
              title={form.data.name}
              description={form.data.shortDescription}
            />
            <p class="resource-card__summary">{form.data.shortDescription}</p>
            <div class="meta-badges">
              {form.data.type && <span class="meta-badge">Type Â· {form.data.type}</span>}
            </div>
          </li>
        ))
      }
    </ul>
  </section>
  <script type="module" lang="ts">
    import {
      loadFavorites,
      subscribeToFavorites,
    } from "../../utils/favorites";

    const form = document.querySelector<HTMLFormElement>(".filter-form");
    const list = document.getElementById("formList");
    const cards = list
      ? Array.from(list.querySelectorAll<HTMLLIElement>(".resource-card"))
      : [];

    let favoritesState: Record<string, unknown> = {};

    const resolveFavorite = (card: HTMLLIElement) => {
      const toggleRoot = card.querySelector<HTMLElement>("[data-favorite-root]");
      const key = toggleRoot?.dataset.favoriteKey ?? "";
      const isFavorite = Boolean(key && favoritesState[key]);
      return { toggleRoot, key, isFavorite } as const;
    };

    const applyFavorites = (items: Record<string, unknown>) => {
      favoritesState = items ?? {};
      cards.forEach((card) => {
        const { toggleRoot, isFavorite } = resolveFavorite(card);
        card.dataset.favorite = String(isFavorite);
        const button = toggleRoot?.querySelector<HTMLButtonElement>(
          "[data-favorite-button]"
        );
        if (button) {
          button.setAttribute("aria-pressed", String(isFavorite));
        }
      });
    };

    const applyFilters = () => {
      const name =
        form?.querySelector<HTMLSelectElement>("[name=\"name\"]")?.value ??
        "";
      const type =
        form?.querySelector<HTMLSelectElement>("[name=\"type\"]")?.value ??
        "";
      const favoritesOnly = Boolean(
        form?.querySelector<HTMLInputElement>("[name=\"favoritesOnly\"]")
          ?.checked
      );

      cards.forEach((card) => {
        const { isFavorite } = resolveFavorite(card);
        card.dataset.favorite = String(isFavorite);
        const matchesName = !name || card.dataset.name === name;
        const matchesType = !type || card.dataset.type === type;
        const matchesFavorite = !favoritesOnly || isFavorite;
        const shouldShow = matchesName && matchesType && matchesFavorite;
        card.hidden = !shouldShow;
      });
    };

    const payload = loadFavorites();
    applyFavorites(payload.items);
    applyFilters();

    form?.addEventListener("change", applyFilters);

    const unsubscribe = subscribeToFavorites((detail) => {
      if (!detail || !detail.payload) return;
      applyFavorites(detail.payload.items);
      applyFilters();
    });

    window.addEventListener(
      "astro:before-swap",
      () => {
        unsubscribe?.();
      },
      { once: true }
    );
  </script>
  <style>
    .resource-card__title a {
      color: inherit;
    }
    .resource-card__title a:hover,
    .resource-card__title a:focus-visible {
      color: var(--color-accent, #ff2f55);
    }
  </style>
</BaseLayout>
