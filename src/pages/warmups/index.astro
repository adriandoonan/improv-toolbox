---
import BaseLayout from "../../layouts/BaseLayout.astro";
import Breadcrumbs from "../../components/Breadcrumbs.astro";
import FilterDrawer from "../../components/FilterDrawer.astro";
import { getCollection } from "astro:content";
const warmups = (await getCollection("warmups")).sort((a, b) =>
  a.data.name.localeCompare(b.data.name)
);
const names = Array.from(new Set(warmups.map((w) => w.data.name))).sort(
  (a, b) => a.localeCompare(b)
);
const focuses = Array.from(
  new Set(warmups.map((w) => w.data.focus).filter(Boolean))
).sort((a, b) => a.localeCompare(b));
const minPeople = Array.from(
  new Set(warmups.map((w) => w.data.minimumPeople).filter((value) =>
    value != null
  ))
).sort((a, b) => a - b);
---

<BaseLayout>
  <section class="collection page-section">
    <header class="collection__header">
      <Breadcrumbs items={[{ label: "Warmups" }]} />
      <div class="stack" style="gap:0.5rem;">
        <h1 class="section-title">Warmups</h1>
        <p class="section-subtitle">
          Ignite energy, sync the group mind, and prime performers before the show.
        </p>
      </div>
      <div class="collection__controls">
        <FilterDrawer
          fields={[
            { name: "name", label: "Name", type: "select", options: names },
            focuses.length
              ? {
                  name: "focus",
                  label: "Focus",
                  type: "select",
                  options: focuses,
                }
              : null,
            minPeople.length
              ? {
                  name: "minimumPeople",
                  label: "Minimum People",
                  type: "select",
                  options: minPeople.map(String),
                }
              : null,
          ].filter(Boolean)}
        />
      </div>
    </header>
    <ul id="warmupList" class="resource-list">
      {
        warmups.map((warmup) => (
          <li
            class="resource-card"
            data-name={warmup.data.name}
            data-focus={warmup.data.focus ?? ""}
            data-minimum-people={
              warmup.data.minimumPeople != null
                ? String(warmup.data.minimumPeople)
                : ""
            }
          >
            <h2 class="resource-card__title">
              <a href={`/warmups/${warmup.slug}`}>{warmup.data.name}</a>
            </h2>
            <p class="resource-card__summary">{warmup.data.shortDescription}</p>
            <div class="meta-badges">
              {warmup.data.focus && <span class="meta-badge">Focus · {warmup.data.focus}</span>}
              {warmup.data.minimumPeople != null && (
                <span class="meta-badge">
                  Min · {warmup.data.minimumPeople}
                </span>
              )}
            </div>
          </li>
        ))
      }
    </ul>
  </section>
  <script>
    const form = document.querySelector(".filter-form");
    const list = document.getElementById("warmupList");
    form &&
      form.addEventListener("change", () => {
        const nameInput = form.querySelector('[name="name"]');
        const focusInput = form.querySelector('[name="focus"]');
        const minPeopleInput = form.querySelector('[name="minimumPeople"]');
        const name = nameInput ? nameInput.value : "";
        const focus = focusInput ? focusInput.value : "";
        const minPeople = minPeopleInput ? minPeopleInput.value : "";
        Array.from(list?.children || []).forEach((li) => {
          const el = li;
          const matchesName = !name || el.dataset.name === name;
          const matchesFocus = !focus || el.dataset.focus === focus;
          const matchesMinPeople =
            !minPeople || el.dataset.minimumPeople === minPeople;
          el.style.display =
            matchesName && matchesFocus && matchesMinPeople ? "" : "none";
        });
      });
  </script>
  <style>
    .resource-card__title a {
      color: inherit;
    }
    .resource-card__title a:hover,
    .resource-card__title a:focus-visible {
      color: var(--color-accent, #ff2f55);
    }
  </style>
</BaseLayout>
