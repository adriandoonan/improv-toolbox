---
interface FilterField {
  name: string;
  label: string;
  type: string;
  options?: string[];
  placeholder?: string;
  inputMode?: string;
  autocomplete?: string;
}

const { fields = [], slot } = Astro.props as {
  fields?: FilterField[];
  slot?: unknown;
};

const componentId = Astro.uid();
const toggleId = `filterDrawerToggle-${componentId}`;
const drawerId = `filterDrawer-${componentId}`;
const backdropId = `filterDrawerBackdrop-${componentId}`;
const toggleSelector = `#${toggleId}`;
const drawerSelector = `#${drawerId}`;
const backdropSelector = `#${backdropId}`;
---

<style>
  .filter-drawer-backdrop {
    position: fixed;
    inset: 0;
    background: rgba(10, 5, 12, 0.55);
    z-index: 900;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.3s ease;
  }
  .filter-drawer.open + .filter-drawer-backdrop {
    opacity: 1;
    pointer-events: auto;
  }
  .filter-drawer {
    position: fixed;
    top: 0;
    right: 0;
    height: 100vh;
    width: min(80vw, 320px);
    background: linear-gradient(165deg, #1a0f16, #150811 60%, #170a13 100%);
    color: #f9f4f6;
    box-shadow: -22px 0 62px rgba(5, 2, 10, 0.55);
    z-index: 901;
    transform: translateX(100%);
    transition: transform 0.3s cubic-bezier(0.4, 1.4, 0.4, 1);
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    padding: calc(1.5rem + env(safe-area-inset-top, 0px)) 1.5rem 2rem;
    border-left: 1px solid rgba(255, 255, 255, 0.08);
  }
  .filter-drawer.open {
    transform: translateX(0);
  }
  .filter-drawer h2 {
    margin: 0;
    font-size: 1.1rem;
    letter-spacing: 0.08em;
    text-transform: uppercase;
  }
  .filter-form {
    display: grid;
    gap: 1rem;
  }
  .filter-form label {
    display: grid;
    gap: 0.5rem;
    font-weight: 600;
    font-size: 0.95rem;
  }
  .filter-form__checkbox {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-weight: 600;
    font-size: 0.95rem;
  }
  .filter-form__checkbox input[type="checkbox"] {
    width: 1.1rem;
    height: 1.1rem;
    accent-color: var(--color-accent, #ff2f55);
  }
  .filter-drawer-toggle {
    all: unset;
  }
  .filter-trigger svg {
    width: 18px;
    height: 18px;
  }
</style>
<button
  class="filter-trigger"
  id={toggleId}
  aria-label="Filter"
  aria-controls={drawerId}
  aria-expanded="false"
  tabindex="0"
>
  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
    <path d="M4 5h16" />
    <path d="M7 12h10" />
    <path d="M10 19h4" />
  </svg>
  Filters
</button>
<div class="filter-drawer" id={drawerId}>
  <h2>Refine</h2>
  <form class="filter-form">
    {
      fields.map((field) => {
        const inputId = `filter-${field.name}`;
        if (field.type === "checkbox") {
          return (
            <label class="filter-form__checkbox">
              <input id={inputId} type="checkbox" name={field.name} />
              <span>{field.label}</span>
            </label>
          );
        }
        return (
          <label for={inputId}>
            {field.label}
            {field.type === "select" ? (
              <select id={inputId} name={field.name}>
                <option value="">All</option>
                {field.options?.map((opt) => (
                  <option value={opt}>{opt}</option>
                ))}
              </select>
            ) : (
              <input
                id={inputId}
                type={field.type}
                name={field.name}
                placeholder={field.placeholder}
                inputmode={field.inputMode}
                autocomplete={field.autocomplete}
              />
            )}
          </label>
        );
      })
    }
  </form>
  <div>{slot}</div>
</div>
  <div class="filter-drawer-backdrop" id={backdropId}></div>
  <script
    data-toggle-selector={toggleSelector}
    data-drawer-selector={drawerSelector}
    data-backdrop-selector={backdropSelector}
  >
  (() => {
    const script = document.currentScript;
    const potentialRoot =
      script?.parentElement ??
      (script?.getRootNode?.() instanceof ShadowRoot
        ? script.getRootNode().host
        : null) ??
      document.body ??
      document.documentElement;
    if (!(potentialRoot instanceof HTMLElement)) {
      return;
    }
    const root = potentialRoot;
    const toggleSelector = script?.dataset.toggleSelector ?? "";
    const drawerSelector = script?.dataset.drawerSelector ?? "";
    const backdropSelector = script?.dataset.backdropSelector ?? "";
    if (!toggleSelector || !drawerSelector || !backdropSelector) {
      return;
    }
    const toggleBtn = root.querySelector(toggleSelector);
    const drawer = root.querySelector(drawerSelector);
    const backdrop = root.querySelector(backdropSelector);
    if (
      !(toggleBtn instanceof HTMLElement) ||
      !(drawer instanceof HTMLElement) ||
      !(backdrop instanceof HTMLElement)
    ) {
      return;
    }
    const ownerDocument = root.ownerDocument ?? document;
    let open = false;
    const cleanup = () => {
      ownerDocument.removeEventListener("keydown", onKeyDown);
    };
    const guardConnected = () => {
      if (!root.isConnected) {
        cleanup();
        return false;
      }
      return true;
    };
    function onKeyDown(event) {
      if (!guardConnected()) {
        return;
      }
      if (event.key === "Escape") {
        closeDrawer();
      }
    }
    function openDrawer() {
      if (!guardConnected() || open) {
        return;
      }
      drawer.classList.add("open");
      backdrop.classList.add("open");
      toggleBtn.classList.add("open");
      toggleBtn.setAttribute("aria-expanded", "true");
      open = true;
      ownerDocument.addEventListener("keydown", onKeyDown);
    }
    function closeDrawer() {
      if (!guardConnected() || !open) {
        return;
      }
      drawer.classList.remove("open");
      backdrop.classList.remove("open");
      toggleBtn.classList.remove("open");
      toggleBtn.setAttribute("aria-expanded", "false");
      open = false;
      cleanup();
    }
    toggleBtn.addEventListener("click", () => {
      if (!guardConnected()) {
        return;
      }
      open ? closeDrawer() : openDrawer();
    });
    backdrop.addEventListener("click", () => {
      if (!guardConnected()) {
        return;
      }
      closeDrawer();
    });
    drawer.querySelectorAll("input,select").forEach((el) => {
      if (el instanceof HTMLInputElement && el.type === "search") {
        return;
      }
      el.addEventListener("change", () => {
        if (!guardConnected()) {
          return;
        }
        closeDrawer();
      });
    });
  })();
</script>
