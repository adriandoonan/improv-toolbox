---
const { fields = [], slot } = Astro.props;
---

<style>
  .filter-drawer-backdrop {
    position: fixed;
    inset: 0;
    background: rgba(10, 5, 12, 0.55);
    z-index: 900;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.3s ease;
  }
  .filter-drawer.open + .filter-drawer-backdrop {
    opacity: 1;
    pointer-events: auto;
  }
  .filter-drawer {
    position: fixed;
    top: 0;
    right: 0;
    height: 100vh;
    width: min(80vw, 320px);
    background: linear-gradient(165deg, #1a0f16, #150811 60%, #170a13 100%);
    color: #f9f4f6;
    box-shadow: -22px 0 62px rgba(5, 2, 10, 0.55);
    z-index: 901;
    transform: translateX(100%);
    transition: transform 0.3s cubic-bezier(0.4, 1.4, 0.4, 1);
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    padding: calc(1.5rem + env(safe-area-inset-top, 0px)) 1.5rem 2rem;
    border-left: 1px solid rgba(255, 255, 255, 0.08);
  }
  .filter-drawer.open {
    transform: translateX(0);
  }
  .filter-drawer h2 {
    margin: 0;
    font-size: 1.1rem;
    letter-spacing: 0.08em;
    text-transform: uppercase;
  }
  .filter-form {
    display: grid;
    gap: 1rem;
  }
  .filter-form label {
    display: grid;
    gap: 0.5rem;
    font-weight: 600;
    font-size: 0.95rem;
  }
  .filter-drawer-toggle {
    all: unset;
  }
  .filter-trigger svg {
    width: 18px;
    height: 18px;
  }
</style>
<button
  class="filter-trigger"
  id="filterDrawerToggle"
  aria-label="Filter"
  aria-controls="filterDrawer"
  aria-expanded="false"
  tabindex="0"
>
  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
    <path d="M4 5h16" />
    <path d="M7 12h10" />
    <path d="M10 19h4" />
  </svg>
  Filters
</button>
<div class="filter-drawer" id="filterDrawer">
  <h2>Refine</h2>
  <form class="filter-form">
    {
      fields.map((field) => (
        <label>
          {field.label}
          {field.type === "select" ? (
            <select name={field.name}>
              <option value="">All</option>
              {field.options?.map((opt) => (
                <option value={opt}>{opt}</option>
              ))}
            </select>
          ) : (
            <input type={field.type} name={field.name} />
          )}
        </label>
      ))
    }
  </form>
  <div>{slot}</div>
</div>
<div class="filter-drawer-backdrop" id="filterDrawerBackdrop"></div>
<script>
  const drawer = document.getElementById("filterDrawer");
  const toggleBtn = document.getElementById("filterDrawerToggle");
  const backdrop = document.getElementById("filterDrawerBackdrop");
  let open = false;
  function openDrawer() {
    drawer?.classList.add("open");
    backdrop?.classList.add("open");
    toggleBtn?.classList.add("open");
    toggleBtn?.setAttribute("aria-expanded", "true");
    open = true;
    document.addEventListener("keydown", onKeyDown);
  }
  function closeDrawer() {
    drawer?.classList.remove("open");
    backdrop?.classList.remove("open");
    toggleBtn?.classList.remove("open");
    toggleBtn?.setAttribute("aria-expanded", "false");
    open = false;
    document.removeEventListener("keydown", onKeyDown);
  }
  function onKeyDown(event) {
    if (event.key === "Escape") {
      closeDrawer();
    }
  }
  toggleBtn?.addEventListener("click", () => {
    open ? closeDrawer() : openDrawer();
  });
  backdrop?.addEventListener("click", closeDrawer);
  drawer?.querySelectorAll("input,select").forEach((el) => {
    el.addEventListener("change", () => {
      closeDrawer();
    });
  });
</script>
