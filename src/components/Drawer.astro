---
const { title = "Menu", links = [] } = Astro.props;
const icons = {
  Home: `<svg width='24' height='24' fill='none' stroke='currentColor' stroke-width='2'><path d='M3 12L12 3l9 9'/><path d='M9 21V12h6v9'/></svg>`,
  Exercises: `<svg width='24' height='24' fill='none' stroke='currentColor' stroke-width='2'><circle cx='12' cy='12' r='10'/><path d='M8 12h8'/></svg>`,
  Forms: `<svg width='24' height='24' fill='none' stroke='currentColor' stroke-width='2'><rect x='4' y='4' width='16' height='16' rx='4'/></svg>`,
  Warmups: `<svg width='24' height='24' fill='none' stroke='currentColor' stroke-width='2'><path d='M12 2v20'/><path d='M2 12h20'/></svg>`,
  Tools: `<svg width='24' height='24' fill='none' stroke='currentColor' stroke-width='2'><circle cx='12' cy='12' r='10'/><path d='M12 8v4l3 3'/></svg>`,
};
---

<style>
  .drawer-backdrop {
    position: fixed;
    inset: 0;
    background: rgba(10, 5, 12, 0.65);
    z-index: 1000;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.3s ease;
  }
  .drawer.open + .drawer-backdrop {
    opacity: 1;
    pointer-events: auto;
  }
  .drawer {
    position: fixed;
    top: 0;
    right: 0;
    height: 100vh;
    width: min(84vw, 360px);
    background: linear-gradient(160deg, #1b0f16, #120912 60%, #160a13 100%);
    color: #fdf8fa;
    box-shadow: -24px 0 64px rgba(5, 2, 10, 0.55);
    z-index: 1001;
    transform: translateX(100%);
    transition: transform 0.3s cubic-bezier(0.4, 1.4, 0.4, 1);
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    padding: calc(1.25rem + env(safe-area-inset-top, 0px)) 1.75rem 2rem;
    border-left: 1px solid rgba(255, 255, 255, 0.08);
  }
  .drawer::before {
    content: "";
    position: absolute;
    inset: 0;
    background: radial-gradient(
      110% 130% at 0% 0%,
      rgba(255, 71, 97, 0.32),
      transparent 60%
    );
    pointer-events: none;
    opacity: 0.9;
  }
  .drawer.open {
    transform: translateX(0);
  }
  .drawer-header {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: space-between;
  }
  .drawer-title {
    font-family: "Epilogue", system-ui, sans-serif;
    font-size: 1.25rem;
    font-weight: 700;
    letter-spacing: 0.08em;
    text-transform: uppercase;
  }
  .drawer-close {
    background: none;
    border: none;
    color: inherit;
    padding: 0.35rem;
    border-radius: 50%;
    cursor: pointer;
  }
  .drawer-nav {
    position: relative;
    z-index: 1;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }
  .drawer-nav a {
    display: flex;
    align-items: center;
    gap: 0.8rem;
    padding: 0.85rem 0.75rem;
    border-radius: 1rem;
    color: inherit;
    text-decoration: none;
    font-weight: 600;
    background: rgba(255, 255, 255, 0.04);
    border: 1px solid rgba(255, 255, 255, 0.08);
    transition: transform 0.2s ease, background 0.2s ease, border 0.2s ease;
  }
  .drawer-nav a:hover,
  .drawer-nav a:focus-visible {
    transform: translateX(6px);
    background: rgba(255, 63, 94, 0.16);
    border-color: rgba(255, 63, 94, 0.35);
  }
  .drawer-nav svg {
    width: 24px;
    height: 24px;
    opacity: 0.75;
  }
  .drawer-aux {
    position: relative;
    z-index: 1;
    margin-top: auto;
    font-size: 0.9rem;
    color: rgba(255, 220, 229, 0.8);
  }
  .drawer-toggle {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 2.75rem;
    height: 2.75rem;
    border-radius: var(--radius-lg);
    background: radial-gradient(circle at 30% 30%, #ff758a, #ff2f55 70%);
    color: #0c0205;
    border: none;
    box-shadow: 0 12px 26px rgba(255, 63, 94, 0.3);
    cursor: pointer;
    transition: transform 0.25s ease, box-shadow 0.25s ease;
  }
  .drawer-toggle:hover,
  .drawer-toggle:focus-visible {
    transform: translateY(-2px);
    box-shadow: 0 28px 46px rgba(255, 63, 94, 0.45);
  }
  .drawer-toggle svg {
    transition: transform 0.3s cubic-bezier(0.4, 1.4, 0.4, 1);
  }
  .drawer-toggle.open svg {
    transform: rotate(45deg);
  }
  @media (max-width: 779px) {
    .drawer-toggle {
      position: fixed;
      left: clamp(1rem, 6vw, 2.25rem);
      bottom: calc(4.75rem + env(safe-area-inset-bottom, 0px));
      margin: 0;
      z-index: 952;
    }
  }
  @media (min-width: 768px) {
    .drawer {
      width: 360px;
    }
  }
  @media (min-width: 780px) {
    .drawer,
    .drawer-backdrop,
    .drawer-toggle {
      display: none;
    }
  }
</style>
<button
  class="drawer-toggle"
  id="drawerToggle"
  aria-label="Open navigation menu"
  aria-controls="drawer"
  aria-expanded="false"
  tabindex="0"
>
  <svg id="drawerIcon" width="28" height="28" viewBox="0 0 32 32">
    <rect y="8" width="32" height="4" rx="2" fill="currentColor"></rect>
    <rect y="20" width="32" height="4" rx="2" fill="currentColor"></rect>
  </svg>
</button>
<div
  class="drawer"
  id="drawer"
  role="navigation"
  aria-label="Main"
  tabindex="-1"
>
  <div class="drawer-header">
    <strong class="drawer-title">{title}</strong>
    <button class="drawer-close" type="button" aria-label="Close menu">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
        <path
          d="M6 6l12 12M18 6L6 18"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
        />
      </svg>
    </button>
  </div>
  <nav class="drawer-nav" aria-label="Main navigation">
    {
      links.map((l) => (
        <a href={l.href} tabindex="0">
          <span set:html={icons[l.label] || ""} />
          <span>{l.label}</span>
        </a>
      ))
    }
  </nav>
  <div class="drawer-aux">
    <slot />
  </div>
</div>
<div class="drawer-backdrop" id="drawerBackdrop"></div>
<script>
  const drawer = document.getElementById("drawer");
  const toggleBtn = document.getElementById("drawerToggle");
  const backdrop = document.getElementById("drawerBackdrop");
  const closeBtn = drawer?.querySelector(".drawer-close");
  const icon = document.getElementById("drawerIcon");
  let open = false;
  function setIcon(isOpen) {
    if (!icon) return;
    icon.innerHTML = isOpen
      ? `<rect x="8" y="8" width="16" height="4" rx="2" fill="currentColor"/><rect x="8" y="20" width="16" height="4" rx="2" fill="currentColor" transform="rotate(45 16 16)"/><rect x="8" y="20" width="16" height="4" rx="2" fill="currentColor" transform="rotate(-45 16 16)"/>`
      : `<rect y="8" width="32" height="4" rx="2" fill="currentColor" /><rect y="20" width="32" height="4" rx="2" fill="currentColor" />`;
    toggleBtn?.setAttribute("aria-expanded", isOpen ? "true" : "false");
  }
  function openDrawer() {
    drawer?.classList.add("open");
    backdrop?.classList.add("open");
    toggleBtn?.classList.add("open");
    setIcon(true);
    open = true;
    drawer?.focus();
    document.addEventListener("keydown", trapFocus);
  }
  function closeDrawer() {
    drawer?.classList.remove("open");
    backdrop?.classList.remove("open");
    toggleBtn?.classList.remove("open");
    setIcon(false);
    open = false;
    toggleBtn?.focus();
    document.removeEventListener("keydown", trapFocus);
  }
  function trapFocus(e) {
    if (e.key === "Escape") {
      closeDrawer();
    }
    if (open && e.key === "Tab" && drawer) {
      const focusable = drawer.querySelectorAll(
        'a,button,[tabindex]:not([tabindex="-1"])'
      );
      const first = focusable[0];
      const last = focusable[focusable.length - 1];
      if (e.shiftKey && document.activeElement === first) {
        e.preventDefault();
        last.focus();
      } else if (!e.shiftKey && document.activeElement === last) {
        e.preventDefault();
        first.focus();
      }
    }
  }
  toggleBtn?.addEventListener("click", () => {
    open ? closeDrawer() : openDrawer();
  });
  closeBtn?.addEventListener("click", closeDrawer);
  backdrop?.addEventListener("click", closeDrawer);
  drawer?.querySelectorAll(".drawer-nav a").forEach((a) => {
    a.addEventListener("click", closeDrawer);
  });
  setIcon(false);
</script>
