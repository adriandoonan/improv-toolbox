---
const {
  title = "Menu",
  links = [],
  id = "global-drawer",
} = Astro.props;
const drawerId = id;
---

<style>
  .drawer-backdrop {
    position: fixed;
    inset: 0;
    background: rgba(10, 5, 12, 0.65);
    z-index: 1000;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.3s ease;
  }
  .drawer.open + .drawer-backdrop {
    opacity: 1;
    pointer-events: auto;
  }
  .drawer {
    position: fixed;
    top: 0;
    right: 0;
    height: 100vh;
    width: min(84vw, 360px);
    background: linear-gradient(160deg, #1b0f16, #120912 60%, #160a13 100%);
    color: #fdf8fa;
    box-shadow: -24px 0 64px rgba(5, 2, 10, 0.55);
    z-index: 1001;
    transform: translateX(100%);
    transition: transform 0.3s cubic-bezier(0.4, 1.4, 0.4, 1);
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    padding: calc(1.25rem + env(safe-area-inset-top, 0px)) 1.75rem 2rem;
    border-left: 1px solid rgba(255, 255, 255, 0.08);
  }
  .drawer::before {
    content: "";
    position: absolute;
    inset: 0;
    background: radial-gradient(
      110% 130% at 0% 0%,
      rgba(255, 71, 97, 0.32),
      transparent 60%
    );
    pointer-events: none;
    opacity: 0.9;
  }
  .drawer.open {
    transform: translateX(0);
  }
  .drawer-header {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: space-between;
  }
  .drawer-title {
    font-family: "Epilogue", system-ui, sans-serif;
    font-size: 1.25rem;
    font-weight: 700;
    letter-spacing: 0.08em;
    text-transform: uppercase;
  }
  .drawer-close {
    background: none;
    border: none;
    color: inherit;
    padding: 0.35rem;
    border-radius: 50%;
    cursor: pointer;
  }
  .drawer-close:hover,
  .drawer-close:focus-visible {
    background: rgba(255, 255, 255, 0.1);
    outline: none;
  }
  .drawer-nav {
    position: relative;
    z-index: 1;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }
  .drawer-nav a {
    display: flex;
    align-items: center;
    gap: 0.8rem;
    padding: 0.85rem 0.75rem;
    border-radius: 1rem;
    color: inherit;
    text-decoration: none;
    font-weight: 600;
    background: rgba(255, 255, 255, 0.04);
    border: 1px solid rgba(255, 255, 255, 0.08);
    transition: transform 0.2s ease, background 0.2s ease, border 0.2s ease;
  }
  .drawer-nav a:hover,
  .drawer-nav a:focus-visible {
    transform: translateX(6px);
    background: rgba(255, 63, 94, 0.16);
    border-color: rgba(255, 63, 94, 0.35);
    outline: none;
  }
  .drawer-nav__icon {
    display: inline-flex;
    width: 24px;
    height: 24px;
    opacity: 0.75;
  }
  .drawer-aux {
    position: relative;
    z-index: 1;
    margin-top: auto;
    font-size: 0.9rem;
    color: rgba(255, 220, 229, 0.8);
  }
  @media (min-width: 768px) {
    .drawer {
      width: 360px;
    }
  }
  @media (min-width: 780px) {
    .drawer,
    .drawer-backdrop {
      display: none;
    }
  }
</style>
<aside
  class="drawer"
  id={drawerId}
  role="dialog"
  aria-modal="true"
  aria-label={title}
  tabindex="-1"
>
  <div class="drawer-header">
    <strong class="drawer-title">{title}</strong>
    <button
      class="drawer-close"
      type="button"
      aria-label="Close menu"
      data-drawer-close
    >
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
        <path
          d="M6 6l12 12M18 6L6 18"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
        />
      </svg>
    </button>
  </div>
  <nav class="drawer-nav" aria-label="Main navigation">
    {
      links.map((link) => (
        <a href={link.href} tabindex="0" data-drawer-link>
          {link.icon && (
            <span class="drawer-nav__icon" set:html={link.icon} />
          )}
          <span>{link.label}</span>
        </a>
      ))
    }
  </nav>
  <div class="drawer-aux">
    <slot />
  </div>
</aside>
<div class="drawer-backdrop" data-drawer-backdrop={drawerId}></div>
<script data-drawer-id={drawerId}>
  const script = document.currentScript;
  const drawerId = script?.dataset.drawerId;
  if (!drawerId) {
    return;
  }
  const drawer = drawerId ? document.getElementById(drawerId) : null;
  const backdrop = drawerId
    ? document.querySelector(`[data-drawer-backdrop="${drawerId}"]`)
    : null;
  const closeBtn = drawer?.querySelector('[data-drawer-close]') ?? null;
  const drawerLinks = drawer
    ? Array.from(drawer.querySelectorAll('[data-drawer-link]'))
    : [];
  const triggers = drawerId
    ? Array.from(document.querySelectorAll(`[data-drawer-target="${drawerId}"]`))
    : [];
  let open = false;
  let lastFocused = null;
  function setExpanded(isOpen) {
    triggers.forEach((trigger) => {
      trigger.setAttribute("aria-expanded", isOpen ? "true" : "false");
      trigger.setAttribute("aria-haspopup", "dialog");
      trigger.classList.toggle("is-active", isOpen);
    });
  }
  function openDrawer() {
    if (!drawer) return;
    lastFocused = document.activeElement;
    drawer.classList.add("open");
    backdrop?.classList.add("open");
    open = true;
    setExpanded(true);
    window.requestAnimationFrame(() => {
      drawer?.focus();
    });
    document.addEventListener("keydown", trapFocus);
  }
  function closeDrawer() {
    if (!drawer) return;
    drawer.classList.remove("open");
    backdrop?.classList.remove("open");
    open = false;
    setExpanded(false);
    if (lastFocused && typeof lastFocused.focus === "function") {
      lastFocused.focus();
    }
    document.removeEventListener("keydown", trapFocus);
  }
  function trapFocus(event) {
    if (event.key === "Escape") {
      closeDrawer();
    }
    if (open && event.key === "Tab" && drawer) {
      const focusable = drawer.querySelectorAll(
        'a,button,[tabindex]:not([tabindex="-1"])'
      );
      const first = focusable[0];
      const last = focusable[focusable.length - 1];
      if (event.shiftKey && document.activeElement === first) {
        event.preventDefault();
        last.focus();
      } else if (!event.shiftKey && document.activeElement === last) {
        event.preventDefault();
        first.focus();
      }
    }
  }
  if (drawer && triggers.length) {
    triggers.forEach((trigger) => {
      trigger.setAttribute("aria-expanded", "false");
      trigger.addEventListener("click", (event) => {
        event.preventDefault();
        open ? closeDrawer() : openDrawer();
      });
      trigger.addEventListener("keydown", (event) => {
        if (event.key === "Enter" || event.key === " ") {
          event.preventDefault();
          open ? closeDrawer() : openDrawer();
        }
      });
    });
  }
  closeBtn?.addEventListener("click", closeDrawer);
  backdrop?.addEventListener("click", closeDrawer);
  drawerLinks.forEach((link) => {
    link.addEventListener("click", closeDrawer);
  });
  setExpanded(false);
</script>
